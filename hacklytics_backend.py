# -*- coding: utf-8 -*-
"""
Hacklytics_Backend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mWkiW4GILM7NjVsYkKIdOaexsZY_0awG

Need to run 'pip install -U -q "google-generativeai>=0.8.2"' and 'pip install pypdf' for the program to work
"""

import pandas as pd
import sklearn
from pypdf import PdfReader
import google.generativeai as genai
import base64
import json
import os



# Returns HTML response as text.
def get_response(user_input):
    # Load insurance data from CSV
    df = pd.read_csv("insurance_data.csv")

    # Load and extract text from the PDF
    pdf = PdfReader("med-ind-lndscp-in.pdf")
    pages = []
    for page in pdf.pages:
        pages.append(page.extract_text())

    # Construct the prompt for the model
    prompt = f"""
    Your task is to predict potential health insurance premiums and deductibles for
    a user based on a set of context and input data, while also providing advice as
    to where they can search for plans that may fit them. Based on the user's
    family, inform them how much they can expect to pay for premiums and deductibles
    at each metal level, and provide examples of insurance companies operating in
    their county.

    At the end of this query, I will provide you with a Pandas DataFrame containing
    a list of all health insurance plans available in Georgia in 2024. Use the
    "County Name" column of the DataFrame to tailor your predictions to the specific
    costs from the user's county. Use the "Issuer Name" column to find a list of
    available insurance providers to provide to the user. The DataFrame will contain
    information about each of the plans, including the premium amounts for different
    family sizes. Columns containing premium amounts may not necessarily have the
    word premium, but will list the type of plan (child, couple, or individual) and
    the number of children attached to the plan. Provide the premiums for the nearest
    age category to the ages provided by the user, but do not acknowledge the rounding
    of ages. Deductibles are listed under the cost sharing columns, and are grouped
    based on the type of medical expense.

    I will also provide you with the contents of a PDF file: {pages}
    This PDF file contains information about the DataFrame you are using. Note that
    you have been given a full list of available health insurance plans from 2024,
    but only for the state of Georgia.

    The user will provide you with some basic information, such as a list of plan
    members with ages, pre-existing health conditions, and the frequency of medical
    visits associated with them, income level, and the county they are located in.
    You should provide an estimate of the premiums the user can expect to pay at
    each metal level based on the ages of their family. Predict this by analyzing
    the costs for each available plan. Additionally, provide a list of insurance
    issuers that operated in their county if they decide to search for other plans.

    The user information will be provided in JSON format, and will be at the end of
    this query. If the user provides information about a certain type of recurring
    medical visits, inform them how much they can expect to pay in deductibles per
    year. Also provide a list of common medical scenarios and the deductibles for
    each.

    If the user has not provided any data, or the JSON input is empty, generate a
    sample response for a scenario of your choice, explaining the sample input at
    the start of the response.

    You have been given enough data to provide plan recommendations. You must always
    provide a list of potential plans from the provided DataFrame regardless of how
    little information you think you are given. Provide a detailed response. Do not
    acknowledge any of the requests I have made in your response to the user. Do not
    acknowledge the use of a dataset in the making of your recommendations. Do not
    refer to yourself in the first person. Ensure that your response is properly
    formatted as HTML/CSS, using bullet points to make the response clearer. Do not
    mention the year, other than to say that the data used to inform your prediction
    was from the year 2024. Do not mention the DataFrame. Do not use the dollar
    sign, instead spell out the word "dollars". Use the data in the DataFrame to
    its fullest extent. Do not add any additional text outside the HTML tags.

    /// RESPONSE FORMAT ///
    [Introduction, whatever you deem necessary]

    [Estimated premiums for bronze (range and average)]
    [Estimated premiums for silver (range and average)]
    [Estimated premiums for gold (range and average)]
    [Estimated premiums for platinum (range and average)]

    [Estimate deductibles for common medical scenarios (range and average) for each
    metal level (ensure that platinum has the lowest deductibles and bronze has the
    highest)]

    [Estimate deductibles for specified recurring visits (range and average)]

    [Inform the user if they may be eligible for cost reductions]

    [Provide examples of insurance companies operating in their county using the
    "Issuer Name" field from the DataFrame (do not mention DataFrame, but make sure
    to actually search it using the filter)]

    [Refer them to other resources, make other recommendation if desired]

    [Disclaimer, and refer users to healthcare.gov]
    /// END RESPONSE ///

    DataFrame of 2024 insurance plans in Georgia:
    {df}

    User JSON input: {user_input}
    """

    # Try to mount Google Drive (only required in Colab)
    try:
       

        # The SDK will automatically read it from the GOOGLE_API_KEY environment variable.
        import os
        api_key = "AIzaSyDCDPCI8_gsiMPr1uq_8xQsHfHPHIjit_I" #change this later

        genai.configure(api_key=api_key)

    except ImportError:
        pass

    # Prepare the data for the API request
    model = "gemini-2.0-flash"
    contents_b64 = base64.b64encode(json.dumps([{"parts": [{"text": prompt}]}]).encode("utf-8"))
    generation_config_b64 = "e30="
    safety_settings_b64 = "e30="
    contents = json.loads(base64.b64decode(contents_b64))
    generation_config = json.loads(base64.b64decode(generation_config_b64))
    safety_settings = json.loads(base64.b64decode(safety_settings_b64))
    stream = False

    # Call the model and get the response
    gemini = genai.GenerativeModel(model_name=model)
    response = gemini.generate_content(
        contents,
        generation_config=generation_config,
        safety_settings=safety_settings,
        stream=stream,
    )

    # Return the model response as text
    return response.text
